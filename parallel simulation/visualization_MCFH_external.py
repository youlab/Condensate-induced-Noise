"""
Visualization of the parallel simulation results
generated by parallel_MCFH_external.py
processed by save_MCFH_data_ext.py

input file:
MCFH_external_noise.xlsx

Author: Zhengqing Zhou, Department of Biomedical Engineering, Duke University
Updated: Mar 26th, 2024
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
import time as timer
from scipy.interpolate import interp1d
from scipy.optimize import root
from solve_phasediagram.solve_2phase import *
from solve_phasediagram.solve_2phase_SC import FloryHuggins as FloryHuggins_SC

if __name__=="__main__":
    chi_12 = 0.8
    chi_11 = 2.3
    chi_22 = 0
    Na = 5
    Nb = 4
    Nc = 1
    N_sim=100

    fh = FloryHuggins(chi_12=chi_12, chi_11=chi_11, chi_22=chi_22, Na=Na, Nb=Nb, Nc=Nc)

    k_translation = 5e-3  # Translation rate: per second (protein synthesis)
    tau_mRNA = 1e2  # mRNA half-life: ~ 5 min (Bernstein 2004 PNAS)
    tau_protein = 3.6e3  # Protein half-life: ~ 1 hour
    V_tot = 1
    v = 2e-5

    binodal = np.loadtxt("./solve_phasediagram/pd_data/phase diagram.dat")
    b = binodal[0]
    k = binodal[1]

    phi_1As = binodal[2]
    phi_2As = binodal[3]
    phi_1Bs = binodal[4]
    phi_2Bs = binodal[5]
    bmax = np.max(b)
    bmin = np.min(b)
    k_b = interp1d(x=b, y=k, kind='linear', fill_value='extrapolate')
    phi1A_b = interp1d(x=b, y=phi_1As, kind='linear', fill_value='extrapolate')
    phi2A_b = interp1d(x=b, y=phi_2As, kind='linear', fill_value='extrapolate')
    phi1B_b = interp1d(x=b, y=phi_1Bs, kind='linear', fill_value='extrapolate')
    phi2B_b = interp1d(x=b, y=phi_2Bs, kind='linear', fill_value='extrapolate')

    exist=1
    labels = ["mRNA1", "mRNA2", "phi1_bar","phi2_bar","V_dilute","V_dense",
              "phi1A", "phi2A", "phi1B", "phi2B"]
    n1 = 40
    n2 = 2
    N_sim = 100
    Phi1 = np.arange(0.01,0.41,0.01,dtype=float)
    Phi2 = np.array([0, 0.1])
    colors=['#808080',"#4682b4"]
    var_shown = ["phi1_bar","phi1A", "V_dense"]
    var_record = ["bulk_phi1","dilute_phi1","BMC_vol"]
    titles=["single-polymer condensate","two-polymer condensate"]
    colors_cv=["tab:blue","tab:orange","tab:green","tab:red","tab:purple"]
    # record the mean and std deviation
    df_record1 = {"phi1": [],
                  "mean log(CV_bulk_phi1)": [], "std log(CV_bulk_phi1)": [],
                  "mean log(CV_dilute_phi1)": [], "std log(CV_dilute_phi1)": [],
                  "mean log(CV_BMC_vol)": [], "std log(CV_BMC_vol)": [],}
    df_record2 = {"phi1": [],
                  "mean log(CV_bulk_phi1)": [], "std log(CV_bulk_phi1)": [],
                  "mean log(CV_dilute_phi1)": [], "std log(CV_dilute_phi1)": [],
                  "mean log(CV_BMC_vol)": [], "std log(CV_BMC_vol)": [],}

    lower_limit=-4
    for i in range(2):# i==0: phi2=0 | i==1: phi2=0.1
        df_record = df_record1 if i==0 else df_record2
        df = pd.read_excel("MCFH_external_noise.xlsx",sheet_name=titles[i])
        x = np.array(df["phi1"])
        df_record["phi1"] = x.tolist()
        fig1, axes1 = plt.subplots(2, 1, figsize=(5, 4))
        ax1, ax2 = axes1
        for k,label in enumerate(var_shown):
            if k in [0,1]:
                ax=ax1
            else:
                ax=ax2
            y1 = np.array(df["log(CV_%s)_t%i"%(var_record[k],1)])
            y2 = np.array(df["log(CV_%s)_t%i"%(var_record[k],2)])
            y3 = np.array(df["log(CV_%s)_t%i"%(var_record[k],3)])
            y = np.array([y1,y2,y3])
            mean = np.mean(y,axis=0)
            std = np.std(y, axis=0)
            df_record["mean log(CV_%s)" % (var_record[k])]=mean.tolist()
            df_record["std log(CV_%s)" % (var_record[k])]=std.tolist()
            ax.errorbar(x, mean, std, linewidth=0, elinewidth=1, color=colors_cv[k],
                        marker="o", markersize=5, mfc="None", mec=colors_cv[k], )

        for j in range(2):
            axes1[j].set_xticks([0,0.2,0.4])
            axes1[j].set_xlim([0,0.41])

            axes1[j].set_ylim([-4.2,1.8])
            axes1[j].set_yticks([-4,-2,0])
        ax1.set_xticklabels([])
        ax1.set_yticklabels([])
        ax1.set_xlabel("")
        ax2.set_yticklabels(["<$10^{%i}$"%lower_limit,"$10^{-2}$","$10^0$"])
        ax2.set_ylabel("CV%",rotation=0,ha="right",va="center",labelpad=0)
        ax2.set_xlabel("<$\phi$>")
        ylim1=ax1.get_ylim()
        ylim2=ax2.get_ylim()
        """
        plot the lower binodal
        """
        if i==0:
            fh_sc = FloryHuggins_SC(chi=chi_11, Na=Na)
            solution = root(fh_sc.binodal, [0.15, 0.5])
            phi1, phi2 = solution.x
            phi_sc = phi1
            for ax in axes1:
                ylim=ax.get_ylim()
                ax.plot([phi_sc, phi_sc], ylim, c="k", linestyle="--", linewidth=1)
                ax.set_ylim(ylim)
            ax1.text(x=phi_sc-0.01, y=0.8*(ylim1[1]-ylim1[0])+ylim1[0], s="$\phi_A$",ha="right")
        else:
            bb = root(lambda x: phi2A_b(x) - 0.1, [0.05]).x
            phi_mc = phi1A_b(bb[0])
            for ax in axes1:
                ylim=ax.get_ylim()
                ax.plot([phi_mc, phi_mc], ylim, c="k", linestyle="--", linewidth=1)
                ax.set_ylim(ylim)
            ax1.text(x=phi_mc - 0.01, y=0.8*(ylim1[1]-ylim1[0])+ylim1[0], s="$\phi_A$", ha="right")
        ax1.set_title(titles[i],pad=8)
        labels=["bulk concentration","dilute phase","condensate volume"]
        for j in range(2):
            ax1.scatter([],[],fc="None",ec=colors_cv[j],linewidth=1,label=labels[j])
        ax2.scatter([], [], fc="None", ec=colors_cv[2], linewidth=1, label=labels[2])
        ax1.legend(loc="upper right")
        ax2.legend(loc="upper right")
        fig1.subplots_adjust(top=0.92,bottom=0.13,left=0.2,right=0.95)
    plt.show()

